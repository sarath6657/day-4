class Solution {
    static void quickSort(int arr[], int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
    }
    }
    static int partition(int arr[], int low, int high) {
        int pivot = arr[high];
        int i = low - 1; 
        
        for (int j = low; j < high; j++) {
            // If current element is <= pivot
            if (arr[j] <= pivot) {
                i++;
                swap(arr, i, j); // Swap arr[i] and arr[j]
            }
        }
        swap(arr, i + 1, high);
        return i + 1;
    }
    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void main(String[] args) {
        int[] arr1 = {4, 1, 3, 9, 7};
        System.out.println("Original array: " + Arrays.toString(arr1));
        quickSort(arr1, 0, arr1.length - 1);
        System.out.println("Sorted array:   " + Arrays.toString(arr1));
        
    }
}
